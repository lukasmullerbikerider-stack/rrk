import os
import time
import json
import logging
import streamlit as st
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime
from jdatetime import datetime as jdatetime
import subprocess
import sys
import tempfile

# ----------------------------------
# تنظیمات عمومی
# ----------------------------------
st.set_page_config(page_title="RRK Company Extractor", page_icon="🏢", layout="wide")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Create a temporary directory for each run
user_data_dir = tempfile.mkdtemp()

# Setup Chrome options
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--incognito")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--window-size=1400,1000")
chrome_options.add_argument("--disable-notifications")

# ----------------------------------
# توابع Selenium
# ----------------------------------
def scrape_company_ads(query):
    """جمع‌آوری آگهی‌های rrk.ir"""
    driver, wait = setup_driver()
    ad_data = []

    try:
        driver.get("https://www.rrk.ir/")
        search_box = wait.until(EC.presence_of_element_located((By.ID, "P0_SEARCH_ITEM")))
        search_box.clear()
        search_box.send_keys(query)
        driver.find_element(By.ID, "BTN_ADVANCEDSEARCH").click()
        time.sleep(3)

        # ورود به بخش آگهی‌ها
        wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "t-LinksList-link"))).click()
        time.sleep(5)

        current_page = 1
        while True:
            ad_links = get_links(driver)
            if not ad_links:
                break

            for tag in ad_links:
                href = tag.get("href")
                if not href.startswith("/ords/r/rrs/rrs-front/f-detail-ad"):
                    continue
                url = "https://rrk.ir" + href

                driver.execute_script("window.open('');")
                driver.switch_to.window(driver.window_handles[1])
                driver.get(url)
                soup = BeautifulSoup(driver.page_source, "html.parser")

                try:
                    data = extract_fields(driver, soup)
                    data["url"] = url
                    ad_data.append(data)
                except Exception as e:
                    logging.warning(f"⚠️ خطا در استخراج آگهی: {e}")
                finally:
                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])
                    time.sleep(2)

            # صفحه بعد
            next_buttons = driver.find_elements(By.CSS_SELECTOR, "ul.a-GV-pageSelector-list li button.a-GV-pageButton")
            next_btn = next((b for b in next_buttons if b.text.isdigit() and int(b.text) == current_page + 1), None)
            if not next_btn:
                break
            driver.execute_script("arguments[0].click();", next_btn)
            current_page += 1
            time.sleep(5)

    except Exception as e:
        logging.error(f"❌ خطا: {e}")
    finally:
        driver.quit()

    return ad_data

def setup_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--user-data-dir=/tmp/unique_profile_" + str(time.time()))
    # Merge with global chrome_options for better compatibility
    for arg in chrome_options.arguments:
        if arg not in options.arguments:
            options.add_argument(arg.split('=')[0] if '=' in arg else arg)
    driver = webdriver.Chrome(options=options)

    driver.implicitly_wait(10)
    wait = WebDriverWait(driver, 60)
    return driver, wait

def get_links(driver):
    soup = BeautifulSoup(driver.page_source, "html.parser")
    return soup.select("a[href*='/ords/r/rrs/rrs-front/f-detail-ad']")

def extract_fields(driver, soup):
    """استخراج فیلدهای آگهی از صفحه جزئیات"""
    fields = {
        "شماره پیگیری": driver.find_element(By.ID, "P28_REFERENCENUMBER").get_attribute("value"),
        "شماره نامه": driver.find_element(By.ID, "P28_INDIKATORNUMBER").get_attribute("value"),
        "تاریخ نامه": driver.find_element(By.ID, "P28_SABTDATE").get_attribute("value"),
        "نام شرکت": driver.find_element(By.ID, "P28_COMPANYNAME").get_attribute("value"),
        "شناسه ملی شرکت": driver.find_element(By.ID, "P28_SABTNATIONALID").get_attribute("value"),
        "شماره ثبت": driver.find_element(By.ID, "P28_SABTNUMBER").get_attribute("value"),
        "شماره روزنامه": driver.find_element(By.ID, "P28_NEWSPAPERNO").get_attribute("value"),
        "تاریخ روزنامه": driver.find_element(By.ID, "P28_NEWSPAPERDATE").get_attribute("value"),
        "شماره صفحه روزنامه": driver.find_element(By.ID, "P28_PAGENUMBER").get_attribute("value"),
        "تعداد نوبت انتشار": driver.find_element(By.ID, "P28_HCNEWSSTAGE").get_attribute("value")
    }
    dynamic = soup.select_one("a-dynamic-content")
    fields["متن آگهی"] = dynamic.get_text(" ", strip=True) if dynamic else soup.get_text(" ", strip=True)
    return fields

# 2️⃣ --- تنظیم API Key ---
apikey = "AIzaSyA-50zuEBmGJEutQmlQ0lK8X2RqqpQXkf4"
# ------------------ توابع کمکی ------------------

def llm(data):
    """ارسال داده به مدل Gemini و دریافت خروجی JSON"""
    try:
        prompt = json.dumps(data, ensure_ascii=False, indent=2)
        system_instruction = """
        نقش: تحلیلگر حقوقی و شرکتی متخصص در روزنامه رسمی.
        وظیفه: استخراج اعضای شرکت از آگهی‌ها به ترتیب تاریخی.
        خروجی JSON طبق قالب مشخص.
        """

        model = genai.GenerativeModel(
            model_name="gemini-2.5-pro",
            system_instruction=system_instruction
        )

        response = model.generate_content(
            prompt,
            generation_config={
                "response_mime_type": "application/json",
                "temperature": 0.2
            }
        )

        result = json.loads(response.text)
        return result

    except Exception as e:
        st.error(f"❌ خطا در پردازش مدل: {e}")
        return None


def shamsi_to_miladi(date_str):
    if not date_str or date_str == 'null':
        return datetime.now()
    try:
        year, month, day = map(int, date_str.split('/'))
        return jdatetime.date(year, month, day).togregorian()
    except Exception:
        return datetime.now()


def charts(data):
    """نمایش سه نمودار جداگانه و تعاملی از اعضای شرکت"""
    if not data:
        st.error("❌ فایل JSON خالی است.")
        return

    # ترکیب اعضای فعلی و سابق
    members = []
    if 'اعضای فعلی شرکت' in data:
        members.extend(data['اعضای فعلی شرکت'])
    if 'اعضای سابق شرکت' in data:
        members.extend(data['اعضای سابق شرکت'])

    if len(members) == 0:
        st.warning("⚠️ هیچ عضوی برای نمایش وجود ندارد.")
        return

    df = pd.DataFrame(members)

    # --- تبدیل تاریخ ---
    def shamsi_to_miladi(date_str):
        if not date_str or not isinstance(date_str, str) or '/' not in date_str:
            return datetime.now()
        try:
            y, m, d = map(int, date_str.split('/'))
            return jdatetime.date(y, m, d).togregorian()
        except:
            return datetime.now()

    df["تاریخ_شروع_میلادی"] = df["تاریخ شروع"].apply(shamsi_to_miladi)
    df["تاریخ_پایان_میلادی"] = df["تاریخ پایان"].apply(shamsi_to_miladi)

    # --- رنگ‌بندی سمت‌ها ---
    color_map = {
        'مدیرعامل': '#FF8C00',
        'مدیرعامل و عضو اصلی هیئت مدیره': '#FF8C00',
        'رئیس هیئت مدیره': '#1f77b4',
        'نایب رئیس هیئت مدیره': '#2ca02c',
        'عضو هیئت مدیره': '#9467bd',
        'عضو اصلی هیئت مدیره': '#9467bd',
        'بازرس اصلی': '#8c564b',
        'بازرس علی البدل': '#e377c2'
    }

    # ============================================================
    # 1️⃣ نمودار تایم‌لاین کامل اعضا
    # ============================================================
    st.subheader("📅 تایم‌لاین کامل اعضای شرکت")

    fig_all = go.Figure()
    for _, row in df.iterrows():
        color = color_map.get(row["سمت"], "#7f7f7f")
        fig_all.add_trace(
            go.Scatter(
                x=[row["تاریخ_شروع_میلادی"], row["تاریخ_پایان_میلادی"]],
                y=[row["نام"], row["نام"]],
                mode="lines+markers",
                name=row["سمت"],
                line=dict(color=color, width=5),
                marker=dict(size=8, color=color),
                hovertemplate=f"<b>{row['نام']}</b><br>{row['سمت']}<br>{row['تاریخ شروع']} تا {row['تاریخ پایان']}<extra></extra>"
            )
        )

    fig_all.update_layout(
        title="تاریخچه‌ی مسئولیت اعضا",
        xaxis_title="زمان",
        yaxis_title="نام اعضا",
        height=700,
        template="plotly_white",
        hovermode="closest"
    )
    st.plotly_chart(fig_all, use_container_width=True)

    # ============================================================
    # 2️⃣ نمودار ویژه مدیرعامل و هیئت مدیره
    # ============================================================
    st.subheader("👔 تایم‌لاین مدیرعامل و هیئت‌مدیره")

    df_board = df[df["سمت"].str.contains("مدیرعامل|هیئت", na=False)]
    fig_board = go.Figure()
    for _, row in df_board.iterrows():
        color = color_map.get(row["سمت"], "#7f7f7f")
        fig_board.add_trace(
            go.Scatter(
                x=[row["تاریخ_شروع_میلادی"], row["تاریخ_پایان_میلادی"]],
                y=[f"{row['نام']} ({row['سمت']})"] * 2,
                mode="lines+markers",
                line=dict(color=color, width=6),
                marker=dict(size=9, color=color),
                hovertemplate=f"<b>{row['نام']}</b><br>{row['سمت']}<br>{row['تاریخ شروع']} تا {row['تاریخ پایان']}<extra></extra>"
            )
        )

    fig_board.update_layout(
        title="تغییرات مدیرعامل و اعضای هیئت‌مدیره",
        xaxis_title="زمان",
        yaxis_title="اعضا",
        height=600,
        template="plotly_white",
        hovermode="closest"
    )
    st.plotly_chart(fig_board, use_container_width=True)

    # ============================================================
    # 3️⃣ نمودار آمار سمت‌ها
    # ============================================================
    st.subheader("📊 آمار تعداد سمت‌ها")

    position_counts = df["سمت"].value_counts()
    fig_bar = go.Figure(
        go.Bar(
            x=position_counts.index,
            y=position_counts.values,
            text=position_counts.values,
            textposition="auto",
            marker_color="#636EFA"
        )
    )
    fig_bar.update_layout(
        title="تعداد تکرار هر سمت در تاریخچه شرکت",
        xaxis_title="سمت",
        yaxis_title="تعداد دفعات",
        height=500,
        template="plotly_white"
    )
    st.plotly_chart(fig_bar, use_container_width=True)


# ------------------ رابط کاربری Streamlit ------------------
st.set_page_config(page_title="RRK Analyzer", layout="wide")
st.title("🏢 RRK.ir – Company Ads Extractor & Analyzer")

tab1, tab2, tab3 = st.tabs(["🕵️ استخراج اطلاعات شرکت", "📂 بررسی اعضای شرکت", "📈 تایم‌لاین اعضای شرکت"])

# --- تب 1 ---
with tab1:
    st.info("در این بخش می‌توانید با وارد کردن نام شرکت، آگهی‌ها را جمع‌آوری کنید (نمونه‌سازی).")
    query = st.text_input("🔍 نام شرکت یا شناسه ملی:")
    if st.button("شروع استخراج"):
        st.warning("این بخش هنوز به تابع scrape_company_ads نیاز دارد (در این نسخه غیرفعال است).")

# --- تب 2: تحلیل فایل آگهی‌ها و تولید ساختار اعضای شرکت ---
with tab2:
    st.markdown("## 📂 تحلیل آگهی‌های شرکت با استفاده از مدل Gemini")

    st.info("""
    📌 در این بخش می‌توانید فایل JSON حاوی آگهی‌های استخراج‌شده از روزنامه رسمی (rrk.ir)
    را بارگذاری کنید تا مدل هوش مصنوعی Gemini ساختار اعضای شرکت (مدیرعامل، هیئت‌مدیره و بازرس‌ها)
    را از آن استخراج کند.
    """)

    uploaded = st.file_uploader("📥 فایل JSON آگهی‌ها را انتخاب کنید", type=["json"], key="tab2_file")

    if uploaded is not None:
        try:
            ads = json.load(uploaded)
            if not isinstance(ads, list) or len(ads) == 0:
                st.error("⚠️ فرمت فایل JSON باید یک لیست از آگهی‌ها باشد.")
            else:
                st.success(f"✅ فایل با {len(ads)} آگهی با موفقیت بارگذاری شد.")
                st.dataframe(pd.DataFrame(ads))

                # خلاصه آماری
                st.markdown("### 🧾 خلاصه اولیه آگهی‌ها")
                companies = {ad.get("نام شرکت") for ad in ads if ad.get("نام شرکت")}
                st.write(f"**تعداد آگهی‌ها:** {len(ads)}")
                st.write(f"**تعداد شرکت‌های منحصربه‌فرد:** {len(companies)}")
                st.write("**نام شرکت‌ها:**", "، ".join(companies))

                # اجرای مدل
                st.divider()
                st.markdown("### 🤖 اجرای مدل تحلیل اعضا")
                run_ai = st.button("🚀 اجرای تحلیل با Gemini", use_container_width=True)

                if run_ai:
                    try:
                        with st.spinner("در حال ارسال داده‌ها به مدل Gemini..."):
                            result = llm(ads)

                        if result:
                            st.success("✅ تحلیل با موفقیت انجام شد!")
                            st.json(result)

                            # دکمه‌ی دانلود خروجی
                            st.download_button(
                                "📥 دانلود خروجی JSON تحلیل‌شده",
                                data=json.dumps(result, ensure_ascii=False, indent=2),
                                file_name="company_members.json",
                                mime="application/json"
                            )
                        else:
                            st.error("❌ مدل هیچ خروجی معتبری برنگرداند. لطفاً ورودی JSON را بررسی کنید.")

                    except Exception as e:
                        st.error(f"⚠️ خطا در اجرای مدل: {e}")
                        st.exception(e)

        except json.JSONDecodeError:
            st.error("❌ فایل JSON معتبر نیست.")
        except Exception as e:
            st.error(f"⚠️ خطا در پردازش فایل: {e}")
            st.exception(e)
    else:
        st.info("برای شروع، فایل JSON آگهی‌ها را بارگذاری کنید.")

# --- تب 3: نمایش تایم‌لاین و آمار اعضای شرکت ---
with tab3:
    st.markdown("## 📈 تایم‌لاین و تحلیل اعضای شرکت")

    st.info("""
    🔹 فایل JSON خروجی مدل (company_members.json) را بارگذاری کنید تا نمودارهای تحلیلی اعضای شرکت نمایش داده شوند.  
    در صورت نداشتن فایل، می‌توانید از داده‌ی نمونه استفاده کنید.
    """)

    col1, col2 = st.columns([3, 1])
    with col1:
        uploaded2 = st.file_uploader("📂 فایل JSON اعضای شرکت را انتخاب کنید", type=["json"], key="tab3_file")

    with col2:
        st.markdown("### یا")
        sample_btn = st.button("📊 نمایش با داده‌ی تستی")

    if uploaded2 is not None:
        try:
            data = json.load(uploaded2)

            if not isinstance(data, dict):
                st.error("❌ ساختار فایل JSON باید یک شیء (object) باشد، نه لیست.")
            elif "اعضای فعلی شرکت" not in data and "اعضای سابق شرکت" not in data:
                st.error("❌ کلیدهای 'اعضای فعلی شرکت' یا 'اعضای سابق شرکت' در فایل وجود ندارند.")
                st.json(data)
            else:
                st.success(f"✅ فایل '{data.get('نام شرکت', '—')}' با موفقیت بارگذاری شد.")
                st.write(f"**شناسه ملی:** {data.get('شناسه شرکت', '—')}")
                st.divider()
                charts(data)
        except json.JSONDecodeError:
            st.error("❌ فایل JSON معتبر نیست.")
        except Exception as e:
            st.error(f"⚠️ خطا در پردازش فایل: {e}")
            st.exception(e)

    elif sample_btn:
        st.warning("⚠️ در حال نمایش داده‌ی نمونه...")

        sample_data = {
            "نام شرکت": "نمونه شرکت آزمایشی",
            "شناسه شرکت": "123456789",
            "اعضای فعلی شرکت": [
                {"نام": "علی رضایی", "سمت": "مدیرعامل", "تاریخ شروع": "1402/01/01", "تاریخ پایان": "1404/01/01"},
                {"نام": "رضا محمدی", "سمت": "رئیس هیئت مدیره", "تاریخ شروع": "1402/01/01", "تاریخ پایان": "1404/01/01"},
                {"نام": "مریم سهرابی", "سمت": "بازرس اصلی", "تاریخ شروع": "1402/01/01", "تاریخ پایان": "تا پایان سال مالی"}
            ],
            "اعضای سابق شرکت": [
                {"نام": "حسین کرمی", "سمت": "مدیرعامل", "تاریخ شروع": "1398/01/01", "تاریخ پایان": "1400/01/01"},
                {"نام": "ناهید احمدی", "سمت": "رئیس هیئت مدیره", "تاریخ شروع": "1398/01/01", "تاریخ پایان": "1400/01/01"}
            ]
        }

        st.divider()
        charts(sample_data)

    else:
        st.info("برای شروع، فایل JSON را بارگذاری کنید یا از داده‌ی تستی استفاده کنید.")
